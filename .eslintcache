[{"/Users/marklevitas/Documents/freelance/weatherapi/src/index.js":"1","/Users/marklevitas/Documents/freelance/weatherapi/src/App.js":"2","/Users/marklevitas/Documents/freelance/weatherapi/src/reportWebVitals.js":"3","/Users/marklevitas/Documents/freelance/weatherapi/src/pages/Home/Home.js":"4","/Users/marklevitas/Documents/freelance/weatherapi/src/reducers/reducer.js":"5","/Users/marklevitas/Documents/freelance/weatherapi/src/pages/FullReport/FullReport.js":"6","/Users/marklevitas/Documents/freelance/weatherapi/src/Modals/Cookie/Cookie.js":"7","/Users/marklevitas/Documents/freelance/weatherapi/src/pages/FullReport/BackgroundChange.js":"8","/Users/marklevitas/Documents/freelance/weatherapi/src/Modals/modalMessage/ModalMessage.js":"9"},{"size":768,"mtime":1610999607937,"results":"10","hashOfConfig":"11"},{"size":582,"mtime":1611862921087,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610923868352,"results":"13","hashOfConfig":"11"},{"size":10462,"mtime":1612544000493,"results":"14","hashOfConfig":"11"},{"size":808,"mtime":1611769636531,"results":"15","hashOfConfig":"11"},{"size":8218,"mtime":1612392404888,"results":"16","hashOfConfig":"11"},{"size":866,"mtime":1612548242803,"results":"17","hashOfConfig":"11"},{"size":3074,"mtime":1611871995717,"results":"18","hashOfConfig":"11"},{"size":1177,"mtime":1612548385934,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"11o2ik5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/marklevitas/Documents/freelance/weatherapi/src/index.js",[],["41","42"],"/Users/marklevitas/Documents/freelance/weatherapi/src/App.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/reportWebVitals.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/pages/Home/Home.js",["43"],"import React, { useEffect, useState } from 'react'\nimport './Home.scss'\nimport Axios from 'axios'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router-dom'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLocationArrow } from '@fortawesome/free-solid-svg-icons'\nimport ModalMessage from '../../Modals/modalMessage/ModalMessage'\nconst Home = (props) => {\n\n    const [modal, setModal] = useState(null)\n\n    useEffect(() => {\n        props.setSelected(null)\n        if (localStorage.getItem('recent') === null) {\n            props.setRecents([])\n        } else {\n            const key = process.env.REACT_APP_KEY\n            const recentsRequest = JSON.parse(localStorage.getItem('recent')).map(latLong => {\n                const options = {\n                    params: {\n                        key,\n                        q: latLong,\n                    }\n                }\n                return Axios.request(`https://api.weatherapi.com/v1/current.json`, options)\n            })\n            Promise.all(recentsRequest).then(results => props.setRecents(results))\n        }\n    }, [])\n\n\n    const autoComplete = (e) => {\n        props.setSearchValue(e.target.value)\n        if (e.target.value.length < 3) {\n            return props.setSearchedLocations([])\n        }\n        const key = process.env.REACT_APP_KEY\n        const options = {\n            params: {\n                key,\n                q: e.target.value\n            }\n        }\n        Axios.request(`https://api.weatherapi.com/v1/search.json`, options).then(res => {\n            if (res.data.length === 0) {\n                return props.setSearchedLocations(null)\n            }\n            props.setSearchedLocations(res.data)\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    const getFullReport = (location) => {\n        const key = process.env.REACT_APP_KEY\n        props.setSelected('loading')\n        props.setSearchValue('')\n        props.setSearchedLocations([])\n        const options = {\n            params: {\n                key,\n                q: `${location.lat},${location.lon}`,\n                days: 3\n            }\n        }\n        Axios.request(`https://api.weatherapi.com/v1/forecast.json`, options).then(res => {\n            res.data.length === 0 ? props.setSelected([]) : props.setSelected(res.data)\n            if (localStorage.getItem('recent') === null || localStorage.getItem('saved') === null) {\n                return\n            }\n\n            let recents = JSON.parse(localStorage.getItem('recent'))\n            if (recents.includes(`${location.lat},${location.lon}`)) {\n                return\n            }\n\n            if (recents.length === 4) {\n                recents.pop()\n            }\n\n            localStorage.setItem('recent', JSON.stringify([`${location.lat},${location.lon}`, ...recents]))\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    const arrowNavigation = (e) => {\n        if (e.keyCode === 38 || e.keyCode === 40) {\n            const droppedDown = document.querySelectorAll('.bar');\n            if (droppedDown) {\n                let currentHighlight = 0;\n                droppedDown.forEach((bar, i) => {\n                    if (bar.classList.contains('highlight')) {\n                        currentHighlight = i;\n                    }\n                    bar.classList.remove('highlight')\n                });\n                if (e.keyCode === 38) {\n                    if (currentHighlight === 0) {\n                        return droppedDown[droppedDown.length - 1].classList.add('highlight')\n                    }\n                    droppedDown[currentHighlight - 1].classList.add('highlight')\n                } else if (e.keyCode === 40) {\n                    if (currentHighlight === droppedDown.length - 1) {\n                        return droppedDown[0].classList.add('highlight')\n                    }\n                    droppedDown[currentHighlight + 1].classList.add('highlight')\n                } else {\n                    return\n                }\n            }\n        }\n        if (e.keyCode === 13) {\n            props.searchedLocations.forEach(location => {\n                if (location.name === document.querySelector('.highlight').innerText) {\n                    getFullReport(location)\n                }\n            });\n        }\n\n    }\n\n    const showPosition = (positionResponse) => {\n        if (positionResponse.code) {\n            switch (positionResponse.code) {\n                case 1:\n                    setModal('off')\n                    props.setSelected(null)\n                    break;\n                default:\n                    setModal('error')\n                    props.setSelected(null)\n            }\n\n        } else if (positionResponse.coords) {\n            const location = {\n                lat: positionResponse.coords.latitude,\n                lon: positionResponse.coords.longitude\n            }\n            getFullReport(location)\n        }\n    }\n    return (\n        <>\n            {\n                !props.setLocation\n                    ?\n                    <div className='homeCont'>\n                        <div className='middleFlex'>\n                            <h1>ML Weather</h1>\n                            <div className='searchBar'>\n                                <input maxLength=\"100\" type='text' placeholder=\"City or Zip\"\n                                    value={props.searcheQuery}\n                                    onChange={(e) => { autoComplete(e) }}\n                                    onKeyUp={(e) => { arrowNavigation(e) }}\n                                    onBlur={() => { document.querySelector('.autoCompleteCont').style.display = 'none' }}\n                                    onFocus={() => { document.querySelector('.autoCompleteCont').style.display = 'block' }} />\n                                <button onClick={() => {\n                                    props.setSelected('loading')\n                                    navigator.geolocation.getCurrentPosition(showPosition, showPosition, {\n                                        enableHighAccuracy: false, \n                                        timeout: 10000,\n                                    })\n                                }}>\n                                    <FontAwesomeIcon icon={faLocationArrow} />\n                                </button>\n                                <span className='credit'>Powered by <a href=\"https://www.weatherapi.com/\" title=\"Free Weather API\" target='_blank' rel=\"noreferrer\">WeatherAPI.com</a></span>\n                                <div className='autoCompleteCont'>\n                                    {\n                                        props.searchedLocations === null ?\n                                            <span className='noLocations'>Could not find any locations</span>\n                                            :\n                                            props.searchedLocations.length === 0 && props.searchQuery.length > 2 ?\n                                                <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n                                                :\n                                                props.searchedLocations?.map((location, i) => {\n                                                    return (\n                                                        i > 4 ? null :\n                                                            <div key={i} className={`bar ${i === 0 ? 'highlight' : null}`} onMouseDown={() => {\n                                                                getFullReport(location)\n                                                            }}>\n                                                                <span>{location.name}</span>\n                                                            </div>\n                                                    )\n                                                })\n                                    }\n\n                                </div>\n                            </div>\n                            <div className='recents'>\n                                {\n                                    props.recents === null\n                                        ?\n                                        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n                                        :\n                                        props.recents.map((recent, i) => {\n                                            return (\n                                                <div key={i} className='recentCont' onClick={() => { getFullReport(recent.data.location) }}>\n                                                    <span className='name'>{recent.data.location.name}</span>\n                                                    <img alt='weather icon' src={recent.data.current.condition.icon} />\n                                                    <span>{recent.data.current.temp_f} º F</span>\n                                                </div>\n                                            )\n                                        })\n                                }\n                            </div>\n                        </div>\n                    </div>\n                    :\n                    props.setLocation === 'loading'\n                        ?\n                        <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n                        :\n                        <Redirect push to={`/${props.setLocation.location.name}`} />\n            }\n            { modal !== null ? <ModalMessage type={modal} setModal={setModal} /> : null }\n        </>\n    )\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setSearchValue: (value) => { dispatch({ type: 'SET_QUERY', payload: value }) },\n        setSearchedLocations: (locations) => { dispatch({ type: 'SET_LOCATIONS', payload: locations }) },\n        setSelected: (data) => { dispatch({ type: 'SET_SELECTED', payload: data }) },\n        setRecents: (data) => { dispatch({ type: 'SET_RECENTS', payload: data }) }\n    }\n}\n\nexport default connect(state => {\n    return {\n        searchedLocations: state.searchedLocations,\n        searchQuery: state.searchQuery,\n        setLocation: state.setLocation,\n        recents: state.recents\n    }\n}, mapDispatchToProps)(Home)","/Users/marklevitas/Documents/freelance/weatherapi/src/reducers/reducer.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/pages/FullReport/FullReport.js",["44"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport './FullReport.scss'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\nimport { Redirect } from 'react-router-dom'\nimport BackgroundChange from './BackgroundChange'\n\nconst FullReport = (props) => {\n    const { setLocation } = props\n    const forecastToday = !setLocation ? null : setLocation.forecast.forecastday[0]\n    const [tempType, setTempType] = useState('F')\n\n    useEffect(() => {\n        if (setLocation) {\n            document.querySelector('.fullReportCont').style.background = BackgroundChange(props.setLocation.current)\n            document.querySelector('.backgroundTransition').style.opacity = 0\n            document.querySelector('.fullReportFlex').style.opacity = 1\n            document.querySelector('.fullReportFlex').style.transform = 'translate(0px, 0px)'\n        }\n\n    }, [])\n\n    const getWeekDay = (day) => {\n        switch (day.getUTCDay()) {\n            case 0:\n                return 'Sunday'\n            case 1:\n                return 'Monday'\n            case 2:\n                return 'Tuesday'\n            case 3:\n                return 'Wednesday'\n            case 4:\n                return 'Thursday'\n            case 5:\n                return 'Friday'\n            case 6:\n                return 'Saturday'\n            default:\n                return\n\n        }\n    }\n\n    const getMonth = (month) => {\n        switch (month.getMonth()) {\n            case 0:\n                return 'January'\n            case 1:\n                return 'Februrary'\n            case 2:\n                return 'March'\n            case 3:\n                return 'April'\n            case 4:\n                return 'May'\n            case 5:\n                return 'June'\n            case 6:\n                return 'July'\n            case 7:\n                return 'August'\n            case 8:\n                return 'September'\n            case 9:\n                return 'October'\n            case 10:\n                return 'November'\n            case 11:\n                return 'December'\n            default:\n                return\n\n        }\n    }\n\n    const getTime = (time) => {\n        let hour = new Date(time.time).getHours()\n        let morningOrNight = 'AM'\n        if (hour > 11) {\n            morningOrNight = 'PM'\n            hour = hour - 12\n        }\n        if (hour === 0) {\n            hour = 12\n        }\n        return `${hour}:00 ${morningOrNight}`\n\n    }\n\n    const getDate = (date) => {\n        const selectedDate = new Date(date.replace(/-/g, \"/\"))\n        return `${getWeekDay(selectedDate)}, ${getMonth(selectedDate)} ${selectedDate.getDate()}`\n    }\n\n    const timeCompare = () => {\n        const currentHour = new Date(setLocation.location.localtime).getHours()\n        return [...forecastToday.hour, ...setLocation.forecast.forecastday[1].hour].filter(hour => {\n            return currentHour <= new Date(hour.time).getHours()\n        }).slice(0, 5)\n\n    }\n    return (\n        <>\n            {!forecastToday ?\n                <Redirect to='/' />\n                :\n                setLocation === 'loading' ?\n                    'loading'\n                    :\n                    <div className='fullReportCont'>\n                        <div className='backgroundTransition'></div>\n                        <div className='fullReportFlex'>\n\n                            <div className='header'>\n                                <h3>{getDate(setLocation.location.localtime)} <span className='tempType' onClick={() => { setTempType(tempType === 'F' ? 'C' : 'F') }}>º {tempType}</span></h3>\n                            </div>\n                            <div className='mainInfo'>\n                                <div className='infoColumnLeft'>\n                                    <h4>{setLocation.location.name}</h4>\n                                    <span className='temp'>{tempType === 'F' ? setLocation.current.temp_f : setLocation.current.temp_c}º</span>\n                                    <div className='highLow'>\n                                        <span className='high'> <FontAwesomeIcon icon={faChevronUp} /> {tempType === 'F' ? forecastToday.day.maxtemp_f : forecastToday.day.maxtemp_c}</span>\n                                        <span className='low'><FontAwesomeIcon icon={faChevronDown} /> {tempType === 'F' ? forecastToday.day.mintemp_f : forecastToday.day.mintemp_c}</span>\n                                    </div>\n                                    <div className='description'>\n                                        {setLocation.current.condition.text}\n                                    </div>\n                                </div>\n                                <div className='divider'></div>\n                                <div className='infoColumnRight'>\n                                    <div>\n                                        <span>Sunrise</span>\n                                        <span>{forecastToday.astro.sunrise}</span>\n                                    </div>\n                                    <div>\n                                        <span>Sunset</span>\n                                        <span>{forecastToday.astro.sunset}</span>\n                                    </div>\n                                    <div>\n                                        <span>Precipitation</span>\n                                        <span>{forecastToday.day.daily_chance_of_rain} %</span>\n                                    </div>\n                                    <div>\n                                        <span>Snow</span>\n                                        <span>{forecastToday.day.daily_chance_of_snow} %</span>\n                                    </div>\n                                    <div>\n                                        <span>Humidity</span>\n                                        <span>{setLocation.current.humidity} %</span>\n                                    </div>\n                                    <div>\n                                        <span>Wind MPH</span>\n                                        <span>{setLocation.current.wind_mph}</span>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='hourly'>\n                                {timeCompare().map((hour, i) => {\n                                    return (\n                                        <div key={i}>\n                                            <span>{getTime(hour)}</span>\n                                            <img alt='weather icon hourly' src={hour.condition.icon} />\n                                            <span>{tempType === 'F' ? hour.temp_f : hour.temp_c} º</span>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                            <div className='threeDay'>\n                                {setLocation.forecast.forecastday.map((day, i) => {\n                                    return (\n                                        <div key={i} className='row'>\n                                            <span className='weekday'>{getWeekDay(new Date(day.date))}</span>\n                                            <span className='icon'><img alt=\"weather icon\" src={day.day.condition.icon} /></span>\n                                            <div className='highLow'><span><FontAwesomeIcon icon={faChevronUp} /> {tempType === 'F' ? day.day.maxtemp_f : day.day.maxtemp_c}</span> <span><FontAwesomeIcon icon={faChevronDown} /> {tempType === 'F' ? day.day.mintemp_f : day.day.mintemp_c}</span></div>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n\n                        </div>\n\n                    </div>\n            }\n\n        </>\n    )\n}\n\nexport default connect(state => {\n    return {\n        setLocation: state.setLocation\n    }\n})(FullReport)","/Users/marklevitas/Documents/freelance/weatherapi/src/Modals/Cookie/Cookie.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/pages/FullReport/BackgroundChange.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/Modals/modalMessage/ModalMessage.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":30,"column":8,"nodeType":"51","endLine":30,"endColumn":10,"suggestions":"52"},{"ruleId":"49","severity":1,"message":"53","line":22,"column":8,"nodeType":"51","endLine":22,"endColumn":10,"suggestions":"54"},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["57"],"React Hook useEffect has missing dependencies: 'props.setLocation' and 'setLocation'. Either include them or remove the dependency array.",["58"],"no-global-assign","no-unsafe-negation",{"desc":"59","fix":"60"},{"desc":"61","fix":"62"},"Update the dependencies array to be: [props]",{"range":"63","text":"64"},"Update the dependencies array to be: [props.setLocation, setLocation]",{"range":"65","text":"66"},[1132,1134],"[props]",[984,986],"[props.setLocation, setLocation]"]