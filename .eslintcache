[{"/Users/marklevitas/Documents/freelance/weatherapi/src/index.js":"1","/Users/marklevitas/Documents/freelance/weatherapi/src/App.js":"2","/Users/marklevitas/Documents/freelance/weatherapi/src/reportWebVitals.js":"3","/Users/marklevitas/Documents/freelance/weatherapi/src/pages/Home/Home.js":"4","/Users/marklevitas/Documents/freelance/weatherapi/src/reducers/reducer.js":"5","/Users/marklevitas/Documents/freelance/weatherapi/src/pages/FullReport/FullReport.js":"6","/Users/marklevitas/Documents/freelance/weatherapi/src/Modals/Cookie/Cookie.js":"7","/Users/marklevitas/Documents/freelance/weatherapi/src/pages/FullReport/BackgroundChange.js":"8","/Users/marklevitas/Documents/freelance/weatherapi/src/Modals/modalMessage/ModalMessage.js":"9"},{"size":768,"mtime":1610999607937,"results":"10","hashOfConfig":"11"},{"size":582,"mtime":1611862921087,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610923868352,"results":"13","hashOfConfig":"11"},{"size":10479,"mtime":1612551452406,"results":"14","hashOfConfig":"11"},{"size":808,"mtime":1612551396738,"results":"15","hashOfConfig":"11"},{"size":8218,"mtime":1612392404888,"results":"16","hashOfConfig":"11"},{"size":866,"mtime":1612548242803,"results":"17","hashOfConfig":"11"},{"size":3074,"mtime":1611871995717,"results":"18","hashOfConfig":"11"},{"size":1177,"mtime":1612548385934,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"11o2ik5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/marklevitas/Documents/freelance/weatherapi/src/index.js",[],["40","41"],"/Users/marklevitas/Documents/freelance/weatherapi/src/App.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/reportWebVitals.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/pages/Home/Home.js",["42"],"/Users/marklevitas/Documents/freelance/weatherapi/src/reducers/reducer.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/pages/FullReport/FullReport.js",["43"],"import React, { useState, useEffect } from 'react'\nimport { connect } from 'react-redux'\nimport './FullReport.scss'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faChevronUp, faChevronDown } from '@fortawesome/free-solid-svg-icons'\nimport { Redirect } from 'react-router-dom'\nimport BackgroundChange from './BackgroundChange'\n\nconst FullReport = (props) => {\n    const { setLocation } = props\n    const forecastToday = !setLocation ? null : setLocation.forecast.forecastday[0]\n    const [tempType, setTempType] = useState('F')\n\n    useEffect(() => {\n        if (setLocation) {\n            document.querySelector('.fullReportCont').style.background = BackgroundChange(props.setLocation.current)\n            document.querySelector('.backgroundTransition').style.opacity = 0\n            document.querySelector('.fullReportFlex').style.opacity = 1\n            document.querySelector('.fullReportFlex').style.transform = 'translate(0px, 0px)'\n        }\n\n    }, [])\n\n    const getWeekDay = (day) => {\n        switch (day.getUTCDay()) {\n            case 0:\n                return 'Sunday'\n            case 1:\n                return 'Monday'\n            case 2:\n                return 'Tuesday'\n            case 3:\n                return 'Wednesday'\n            case 4:\n                return 'Thursday'\n            case 5:\n                return 'Friday'\n            case 6:\n                return 'Saturday'\n            default:\n                return\n\n        }\n    }\n\n    const getMonth = (month) => {\n        switch (month.getMonth()) {\n            case 0:\n                return 'January'\n            case 1:\n                return 'Februrary'\n            case 2:\n                return 'March'\n            case 3:\n                return 'April'\n            case 4:\n                return 'May'\n            case 5:\n                return 'June'\n            case 6:\n                return 'July'\n            case 7:\n                return 'August'\n            case 8:\n                return 'September'\n            case 9:\n                return 'October'\n            case 10:\n                return 'November'\n            case 11:\n                return 'December'\n            default:\n                return\n\n        }\n    }\n\n    const getTime = (time) => {\n        let hour = new Date(time.time).getHours()\n        let morningOrNight = 'AM'\n        if (hour > 11) {\n            morningOrNight = 'PM'\n            hour = hour - 12\n        }\n        if (hour === 0) {\n            hour = 12\n        }\n        return `${hour}:00 ${morningOrNight}`\n\n    }\n\n    const getDate = (date) => {\n        const selectedDate = new Date(date.replace(/-/g, \"/\"))\n        return `${getWeekDay(selectedDate)}, ${getMonth(selectedDate)} ${selectedDate.getDate()}`\n    }\n\n    const timeCompare = () => {\n        const currentHour = new Date(setLocation.location.localtime).getHours()\n        return [...forecastToday.hour, ...setLocation.forecast.forecastday[1].hour].filter(hour => {\n            return currentHour <= new Date(hour.time).getHours()\n        }).slice(0, 5)\n\n    }\n    return (\n        <>\n            {!forecastToday ?\n                <Redirect to='/' />\n                :\n                setLocation === 'loading' ?\n                    'loading'\n                    :\n                    <div className='fullReportCont'>\n                        <div className='backgroundTransition'></div>\n                        <div className='fullReportFlex'>\n\n                            <div className='header'>\n                                <h3>{getDate(setLocation.location.localtime)} <span className='tempType' onClick={() => { setTempType(tempType === 'F' ? 'C' : 'F') }}>ยบ {tempType}</span></h3>\n                            </div>\n                            <div className='mainInfo'>\n                                <div className='infoColumnLeft'>\n                                    <h4>{setLocation.location.name}</h4>\n                                    <span className='temp'>{tempType === 'F' ? setLocation.current.temp_f : setLocation.current.temp_c}ยบ</span>\n                                    <div className='highLow'>\n                                        <span className='high'> <FontAwesomeIcon icon={faChevronUp} /> {tempType === 'F' ? forecastToday.day.maxtemp_f : forecastToday.day.maxtemp_c}</span>\n                                        <span className='low'><FontAwesomeIcon icon={faChevronDown} /> {tempType === 'F' ? forecastToday.day.mintemp_f : forecastToday.day.mintemp_c}</span>\n                                    </div>\n                                    <div className='description'>\n                                        {setLocation.current.condition.text}\n                                    </div>\n                                </div>\n                                <div className='divider'></div>\n                                <div className='infoColumnRight'>\n                                    <div>\n                                        <span>Sunrise</span>\n                                        <span>{forecastToday.astro.sunrise}</span>\n                                    </div>\n                                    <div>\n                                        <span>Sunset</span>\n                                        <span>{forecastToday.astro.sunset}</span>\n                                    </div>\n                                    <div>\n                                        <span>Precipitation</span>\n                                        <span>{forecastToday.day.daily_chance_of_rain} %</span>\n                                    </div>\n                                    <div>\n                                        <span>Snow</span>\n                                        <span>{forecastToday.day.daily_chance_of_snow} %</span>\n                                    </div>\n                                    <div>\n                                        <span>Humidity</span>\n                                        <span>{setLocation.current.humidity} %</span>\n                                    </div>\n                                    <div>\n                                        <span>Wind MPH</span>\n                                        <span>{setLocation.current.wind_mph}</span>\n                                    </div>\n                                </div>\n                            </div>\n                            <div className='hourly'>\n                                {timeCompare().map((hour, i) => {\n                                    return (\n                                        <div key={i}>\n                                            <span>{getTime(hour)}</span>\n                                            <img alt='weather icon hourly' src={hour.condition.icon} />\n                                            <span>{tempType === 'F' ? hour.temp_f : hour.temp_c} ยบ</span>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n                            <div className='threeDay'>\n                                {setLocation.forecast.forecastday.map((day, i) => {\n                                    return (\n                                        <div key={i} className='row'>\n                                            <span className='weekday'>{getWeekDay(new Date(day.date))}</span>\n                                            <span className='icon'><img alt=\"weather icon\" src={day.day.condition.icon} /></span>\n                                            <div className='highLow'><span><FontAwesomeIcon icon={faChevronUp} /> {tempType === 'F' ? day.day.maxtemp_f : day.day.maxtemp_c}</span> <span><FontAwesomeIcon icon={faChevronDown} /> {tempType === 'F' ? day.day.mintemp_f : day.day.mintemp_c}</span></div>\n                                        </div>\n                                    )\n                                })}\n                            </div>\n\n                        </div>\n\n                    </div>\n            }\n\n        </>\n    )\n}\n\nexport default connect(state => {\n    return {\n        setLocation: state.setLocation\n    }\n})(FullReport)","/Users/marklevitas/Documents/freelance/weatherapi/src/Modals/Cookie/Cookie.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/pages/FullReport/BackgroundChange.js",[],"/Users/marklevitas/Documents/freelance/weatherapi/src/Modals/modalMessage/ModalMessage.js",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":30,"column":8,"nodeType":"50","endLine":30,"endColumn":10,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":22,"column":8,"nodeType":"50","endLine":22,"endColumn":10,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["56"],"React Hook useEffect has missing dependencies: 'props.setLocation' and 'setLocation'. Either include them or remove the dependency array.",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [props]",{"range":"62","text":"63"},"Update the dependencies array to be: [props.setLocation, setLocation]",{"range":"64","text":"65"},[1132,1134],"[props]",[984,986],"[props.setLocation, setLocation]"]